# Generated by Django 3.2 on 2025-08-21 17:17

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import djongo.models.fields
import users.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('id', models.CharField(default=users.models.generate_uuid, editable=False, max_length=36, primary_key=True, serialize=False, unique=True)),
                ('username', models.CharField(blank=True, default='', help_text="Nom d'utilisateur unique généré automatiquement", max_length=150, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('nom', models.CharField(default='', max_length=100)),
                ('telephone', models.CharField(blank=True, default='', max_length=20)),
                ('preference_carburant', models.CharField(blank=True, choices=[('électrique', 'Électrique'), ('hybride', 'Hybride'), ('essence', 'Essence'), ('diesel', 'Diesel')], default='', max_length=20)),
                ('role', models.CharField(choices=[('client', 'Client'), ('agence', 'Agence'), ('admin', 'Admin'), ('visiteur', 'Visiteur')], default='visiteur', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('last_login_attempt', models.DateTimeField(blank=True, null=True)),
                ('login_attempts', models.PositiveIntegerField(default=0)),
                ('photo_url', models.URLField(blank=True, null=True)),
                ('budget_journalier', models.DecimalField(decimal_places=2, default=Decimal('50.00'), max_digits=8, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('password_reset_token', models.CharField(blank=True, max_length=100, null=True)),
                ('password_reset_expiry', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Agence',
            fields=[
                ('id', models.CharField(default=users.models.generate_uuid, editable=False, max_length=36, primary_key=True, serialize=False, unique=True)),
                ('nom', models.CharField(max_length=100)),
                ('adresse', models.CharField(max_length=200)),
                ('ville', models.CharField(max_length=100)),
                ('code_postal', models.CharField(max_length=20)),
                ('pays', models.CharField(max_length=100)),
                ('telephone', models.CharField(blank=True, max_length=20)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('site_web', models.URLField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('active', models.BooleanField(default=True)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-date_creation'],
            },
        ),
        migrations.CreateModel(
            name='EcoChallenge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('eco_driving', 'Conduite Écologique'), ('co2_reduction', 'Réduction CO₂'), ('fuel_efficiency', 'Efficacité Énergétique'), ('eco_score', 'Score Écologique')], max_length=20)),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('description', models.TextField(verbose_name='Description')),
                ('target_value', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Valeur objectif')),
                ('unit', models.CharField(max_length=50, verbose_name='Unité de mesure')),
                ('difficulty', models.CharField(choices=[('beginner', 'Débutant'), ('intermediate', 'Intermédiaire'), ('expert', 'Expert')], default='beginner', max_length=20)),
                ('duration_days', models.PositiveIntegerField(default=14, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(365)], verbose_name='Durée en jours')),
                ('reward_points', models.PositiveIntegerField(default=0, verbose_name='Points de récompense')),
                ('reward_credit_euros', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=8, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Crédit en euros')),
                ('reward_badge', models.CharField(blank=True, max_length=100, null=True, verbose_name='Badge de récompense')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('max_participants', models.PositiveIntegerField(blank=True, null=True, verbose_name='Nombre max de participants')),
                ('valid_from', models.DateTimeField(default=django.utils.timezone.now)),
                ('valid_until', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Défi Éco-Responsable',
                'verbose_name_plural': 'Défis Éco-Responsables',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Vehicule',
            fields=[
                ('id', models.CharField(default=users.models.generate_uuid, editable=False, max_length=36, primary_key=True, serialize=False, unique=True)),
                ('marque', models.CharField(max_length=50)),
                ('modele', models.CharField(max_length=50)),
                ('carburant', models.CharField(choices=[('électrique', 'Électrique'), ('hybride', 'Hybride'), ('essence', 'Essence'), ('diesel', 'Diesel')], max_length=20)),
                ('transmission', models.CharField(choices=[('manuelle', 'Manuelle'), ('automatique', 'Automatique')], default='manuelle', max_length=20)),
                ('nombre_places', models.PositiveIntegerField(default=5)),
                ('annee', models.PositiveIntegerField(blank=True, null=True)),
                ('kilometrage', models.PositiveIntegerField(blank=True, null=True)),
                ('couleur', models.CharField(blank=True, max_length=50)),
                ('immatriculation', models.CharField(blank=True, max_length=20, null=True)),
                ('emissionsCO2', models.IntegerField(blank=True, help_text='Émissions CO2 en g/km', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('consommationEnergie', models.DecimalField(blank=True, decimal_places=2, help_text='Consommation en L/100km ou kWh/100km', max_digits=5, null=True)),
                ('prix_par_jour', models.DecimalField(decimal_places=2, help_text='Prix quotidien en euros', max_digits=8, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('localisation', models.CharField(blank=True, max_length=100)),
                ('description', models.TextField(blank=True)),
                ('statut', models.CharField(choices=[('disponible', 'Disponible'), ('loué', 'Loué'), ('maintenance', 'Maintenance'), ('hors_service', 'Hors service')], default='disponible', max_length=20)),
                ('date_derniere_maintenance', models.DateField(blank=True, null=True)),
                ('prochaine_maintenance', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='vehicules/')),
                ('agence', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vehicules', to='users.agence')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserEcoChallenge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('active', 'Actif'), ('completed', 'Terminé'), ('abandoned', 'Abandonné'), ('expired', 'Expiré')], default='active', max_length=20)),
                ('progress', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Progression actuelle')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('deadline', models.DateTimeField(verbose_name='Date limite')),
                ('reward_claimed', models.BooleanField(default=False)),
                ('final_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_challenges', to='users.ecochallenge')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='eco_challenges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Défi Utilisateur',
                'verbose_name_plural': 'Défis Utilisateur',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.CharField(default=users.models.generate_uuid, editable=False, max_length=36, primary_key=True, serialize=False, unique=True)),
                ('date_debut', models.DateTimeField()),
                ('date_fin', models.DateTimeField()),
                ('montant_total', models.DecimalField(decimal_places=2, help_text='Montant total en euros', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0'))])),
                ('statut', models.CharField(choices=[('en_attente', 'En attente'), ('confirmee', 'Confirmée'), ('terminee', 'Terminée'), ('annulee', 'Annulée')], default='en_attente', max_length=20)),
                ('commentaires', models.TextField(blank=True)),
                ('assurance_complete', models.BooleanField(default=False)),
                ('conducteur_supplementaire', models.BooleanField(default=False)),
                ('gps', models.BooleanField(default=False)),
                ('siege_enfant', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('vehicule', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.vehicule')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MaintenancePrediction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prediction_date', models.DateTimeField(auto_now_add=True)),
                ('predicted_failure_date', models.DateTimeField()),
                ('confidence', models.FloatField()),
                ('failure_type', models.CharField(max_length=100)),
                ('recommendation', models.TextField()),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_predictions', to='users.vehicule')),
            ],
        ),
        migrations.CreateModel(
            name='IOTData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('temperature', models.FloatField()),
                ('vibration', models.FloatField()),
                ('fuel_consumption', models.FloatField()),
                ('mileage', models.FloatField()),
                ('engine_hours', models.FloatField()),
                ('battery_health', models.FloatField()),
                ('vehicle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='iot_data', to='users.vehicule')),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('_id', djongo.models.fields.ObjectIdField(auto_created=True, primary_key=True, serialize=False)),
                ('rating', models.IntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                ('comment', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EcoScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.FloatField()),
                ('co2_emissions', models.FloatField()),
                ('energy_consumption', models.FloatField()),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('vehicle', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='eco_score', to='users.vehicule')),
            ],
        ),
        migrations.CreateModel(
            name='EcoChallengeReward',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('points_awarded', models.PositiveIntegerField(default=0)),
                ('credit_awarded', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=8, validators=[django.core.validators.MinValueValidator(0)])),
                ('badge_awarded', models.CharField(blank=True, max_length=100, null=True)),
                ('awarded_at', models.DateTimeField(auto_now_add=True)),
                ('applied_to_account', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='eco_rewards', to=settings.AUTH_USER_MODEL)),
                ('user_challenge', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='reward', to='users.userecochallenge')),
            ],
            options={
                'verbose_name': 'Récompense de Défi',
                'verbose_name_plural': 'Récompenses de Défis',
                'ordering': ['-awarded_at'],
            },
        ),
        migrations.CreateModel(
            name='EcoChallengeProgress',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('value', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('eco_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('co2_saved', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('energy_consumption', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('distance_km', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('vehicle_id', models.UUIDField(blank=True, null=True)),
                ('reservation_id', models.UUIDField(blank=True, null=True)),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('user_challenge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progress_history', to='users.userecochallenge')),
            ],
            options={
                'verbose_name': 'Progression de Défi',
                'verbose_name_plural': 'Progressions de Défis',
                'ordering': ['-recorded_at'],
            },
        ),
        migrations.AddIndex(
            model_name='agence',
            index=models.Index(fields=['nom'], name='agence_nom_idx'),
        ),
        migrations.AddIndex(
            model_name='agence',
            index=models.Index(fields=['email'], name='agence_email_idx'),
        ),
        migrations.AddIndex(
            model_name='agence',
            index=models.Index(fields=['date_creation'], name='agence_date_creation_idx'),
        ),
        migrations.AddIndex(
            model_name='agence',
            index=models.Index(fields=['ville'], name='agence_ville_idx'),
        ),
        migrations.AddIndex(
            model_name='agence',
            index=models.Index(fields=['code_postal'], name='agence_code_postal_idx'),
        ),
        migrations.AddField(
            model_name='user',
            name='agence',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='users.agence'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddIndex(
            model_name='vehicule',
            index=models.Index(fields=['marque', 'modele'], name='vehicule_marque_modele_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicule',
            index=models.Index(fields=['statut'], name='vehicule_statut_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicule',
            index=models.Index(fields=['carburant'], name='vehicule_carburant_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicule',
            index=models.Index(fields=['created_at'], name='vehicule_created_at_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicule',
            index=models.Index(fields=['agence'], name='vehicule_agence_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicule',
            index=models.Index(fields=['prix_par_jour'], name='vehicule_prix_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicule',
            index=models.Index(fields=['immatriculation'], name='vehicule_immatriculation_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userecochallenge',
            unique_together={('user', 'challenge')},
        ),
        migrations.AddIndex(
            model_name='reservation',
            index=models.Index(fields=['date_debut', 'date_fin'], name='reservation_date_idx'),
        ),
        migrations.AddIndex(
            model_name='reservation',
            index=models.Index(fields=['statut'], name='reservation_statut_idx'),
        ),
        migrations.AddIndex(
            model_name='reservation',
            index=models.Index(fields=['created_at'], name='reservation_created_at_idx'),
        ),
        migrations.AddIndex(
            model_name='reservation',
            index=models.Index(fields=['vehicule'], name='reservation_vehicule_idx'),
        ),
        migrations.AddConstraint(
            model_name='ecoscore',
            constraint=models.UniqueConstraint(fields=('vehicle',), name='unique_vehicle_eco_score'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='user_email_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['username'], name='user_username_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['date_joined'], name='user_date_joined_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role'], name='user_role_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['password_reset_token'], name='user_reset_token_idx'),
        ),
    ]
