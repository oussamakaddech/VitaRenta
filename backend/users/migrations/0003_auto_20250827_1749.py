# Generated by Django 3.2 on 2025-08-27 16:49

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0002_auto_20250821_1838'),
    ]

    operations = [
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('description', models.TextField(verbose_name='Description')),
                ('coupon_type', models.CharField(choices=[('discount_percentage', 'Réduction pourcentage'), ('discount_fixed', 'Réduction fixe'), ('free_rental', 'Location gratuite'), ('upgrade', 'Surclassement gratuit'), ('fuel_voucher', 'Bon carburant')], default='discount_percentage', max_length=30)),
                ('discount_value', models.DecimalField(decimal_places=2, help_text='Pourcentage (1-100) ou montant fixe en euros', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Valeur de réduction')),
                ('points_cost', models.PositiveIntegerField(help_text='Nombre de points nécessaires pour obtenir ce coupon', verbose_name='Coût en points')),
                ('valid_from', models.DateTimeField(default=django.utils.timezone.now)),
                ('valid_until', models.DateTimeField(verbose_name="Valide jusqu'au")),
                ('max_uses', models.PositiveIntegerField(default=1, help_text="Nombre maximum d'utilisations par coupon", verbose_name='Utilisations maximum')),
                ('max_discount_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Pour les réductions en pourcentage', max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Montant maximum de réduction')),
                ('minimum_order_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=8, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='Montant minimum de commande')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('applicable_vehicle_types', models.JSONField(blank=True, default=list, help_text='Types de véhicules applicables (vide = tous)')),
                ('applicable_locations', models.JSONField(blank=True, default=list, help_text='Localisations applicables (vide = toutes)')),
            ],
            options={
                'verbose_name': 'Coupon',
                'verbose_name_plural': 'Coupons',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserCoupon',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('coupon_code', models.CharField(max_length=20, unique=True, verbose_name='Code coupon')),
                ('status', models.CharField(choices=[('active', 'Actif'), ('used', 'Utilisé'), ('expired', 'Expiré'), ('cancelled', 'Annulé')], default='active', max_length=20)),
                ('uses_remaining', models.PositiveIntegerField(default=1)),
                ('obtained_at', models.DateTimeField(auto_now_add=True)),
                ('used_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Coupon Utilisateur',
                'verbose_name_plural': 'Coupons Utilisateur',
                'ordering': ['-obtained_at'],
            },
        ),
        migrations.AlterModelOptions(
            name='ecochallenge',
            options={'ordering': ['-featured', '-created_at'], 'verbose_name': 'Défi Éco-Responsable', 'verbose_name_plural': 'Défis Éco-Responsables'},
        ),
        migrations.AddField(
            model_name='ecochallenge',
            name='auto_approve_participants',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='ecochallenge',
            name='bonus_multiplier',
            field=models.DecimalField(decimal_places=2, default=Decimal('1.00'), max_digits=3, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))]),
        ),
        migrations.AddField(
            model_name='ecochallenge',
            name='category',
            field=models.CharField(choices=[('environmental', 'Environnemental'), ('efficiency', 'Efficacité'), ('innovation', 'Innovation'), ('community', 'Communauté')], default='environmental', max_length=50),
        ),
        migrations.AddField(
            model_name='ecochallenge',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_challenges', to=settings.AUTH_USER_MODEL, verbose_name='Créé par'),
        ),
        migrations.AddField(
            model_name='ecochallenge',
            name='estimated_completion_rate',
            field=models.DecimalField(decimal_places=2, default=Decimal('50.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))]),
        ),
        migrations.AddField(
            model_name='ecochallenge',
            name='featured',
            field=models.BooleanField(default=False, verbose_name='En vedette'),
        ),
        migrations.AddField(
            model_name='ecochallenge',
            name='priority',
            field=models.CharField(choices=[('low', 'Faible'), ('medium', 'Moyenne'), ('high', 'Haute'), ('critical', 'Critique')], default='medium', max_length=20),
        ),
        migrations.AddField(
            model_name='ecochallenge',
            name='requirements',
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.AddField(
            model_name='ecochallenge',
            name='seasonal_bonus',
            field=models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))]),
        ),
        migrations.AddField(
            model_name='ecochallenge',
            name='success_criteria',
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.AddField(
            model_name='ecochallenge',
            name='tags',
            field=models.JSONField(blank=True, default=list),
        ),
        migrations.AddField(
            model_name='ecochallenge',
            name='total_impact_co2',
            field=models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))]),
        ),
        migrations.AddField(
            model_name='user',
            name='points_balance',
            field=models.PositiveIntegerField(default=0, verbose_name='Solde de points'),
        ),
        migrations.AlterField(
            model_name='ecochallenge',
            name='difficulty',
            field=models.CharField(choices=[('beginner', 'Débutant'), ('intermediate', 'Intermédiaire'), ('advanced', 'Avancé'), ('expert', 'Expert')], default='beginner', max_length=20),
        ),
        migrations.AlterField(
            model_name='ecochallenge',
            name='type',
            field=models.CharField(choices=[('eco_driving', 'Conduite Écologique'), ('co2_reduction', 'Réduction CO₂'), ('fuel_efficiency', 'Efficacité Énergétique'), ('eco_score', 'Score Écologique'), ('low_emission', 'Faibles émissions'), ('distance_reduction', 'Réduction de distance'), ('alternative_transport', 'Transport alternatif')], max_length=30),
        ),
        migrations.AlterField(
            model_name='ecochallengereward',
            name='awarded_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rewards_awarded', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='ecochallengereward',
            name='claimed',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='ecochallengereward',
            name='claimed_at',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='ecochallengereward',
            name='description',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='ecochallengereward',
            name='points',
            field=models.PositiveIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='ecochallengereward',
            name='reward_type',
            field=models.CharField(choices=[('points', 'Points'), ('badge', 'Badge'), ('discount', 'Réduction'), ('free_rental', 'Location gratuite'), ('certificate', 'Certificat'), ('eco_bonus', 'Bonus écologique')], default='points', max_length=20),
        ),
        migrations.AlterField(
            model_name='ecochallengereward',
            name='title',
            field=models.CharField(default='Récompense', max_length=200),
        ),
        migrations.AlterField(
            model_name='userecochallenge',
            name='deadline',
            field=models.DateTimeField(blank=True, null=True, verbose_name='Date limite'),
        ),
        migrations.AlterField(
            model_name='userecochallenge',
            name='progress',
            field=models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))]),
        ),
        migrations.AddIndex(
            model_name='ecochallenge',
            index=models.Index(fields=['type', 'difficulty'], name='users_ecoch_type_e583f9_idx'),
        ),
        migrations.AddIndex(
            model_name='ecochallenge',
            index=models.Index(fields=['is_active', 'featured'], name='users_ecoch_is_acti_0053a3_idx'),
        ),
        migrations.AddIndex(
            model_name='ecochallenge',
            index=models.Index(fields=['created_by'], name='users_ecoch_created_b29934_idx'),
        ),
        migrations.AddIndex(
            model_name='ecochallenge',
            index=models.Index(fields=['category', 'priority'], name='users_ecoch_categor_07b789_idx'),
        ),
        migrations.AddField(
            model_name='usercoupon',
            name='coupon',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_coupons', to='users.coupon'),
        ),
        migrations.AddField(
            model_name='usercoupon',
            name='used_in_reservation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='applied_coupons', to='users.reservation'),
        ),
        migrations.AddField(
            model_name='usercoupon',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_coupons', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='usercoupon',
            unique_together={('user', 'coupon_code')},
        ),
    ]
