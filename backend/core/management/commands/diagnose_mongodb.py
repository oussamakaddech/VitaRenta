#!/usr/bin/env python3
"""
Commande Django pour diagnostiquer les probl√®mes de connexion MongoDB avec Djongo
"""

from django.core.management.base import BaseCommand
from django.conf import settings
import os
import sys
import traceback


class Command(BaseCommand):
    help = 'Diagnostic des probl√®mes de connexion MongoDB avec Djongo'

    def add_arguments(self, parser):
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='Affichage d√©taill√© des informations de diagnostic',
        )
        parser.add_argument(
            '--fix',
            action='store_true',
            help='Tenter de corriger automatiquement les probl√®mes d√©tect√©s',
        )

    def handle(self, *args, **options):
        verbose = options['verbose']
        auto_fix = options['fix']
        
        self.stdout.write("üîç Diagnostic MongoDB/Djongo")
        self.stdout.write("=" * 50)
        
        # 1. V√©rifier la configuration MongoDB
        self.check_mongodb_config(verbose)
        
        # 2. Tester la connexion MongoDB directe
        self.test_mongodb_connection(verbose)
        
        # 3. Tester la connexion Djongo
        self.test_djongo_connection(verbose)
        
        # 4. V√©rifier les mod√®les
        self.check_models(verbose)
        
        # 5. Diagnostic des probl√®mes de fermeture de connexion
        self.diagnose_connection_issues(verbose)
        
        if auto_fix:
            self.stdout.write("\nüîß Tentative de correction automatique...")
            self.apply_fixes()

    def check_mongodb_config(self, verbose):
        """V√©rifier la configuration MongoDB dans settings.py"""
        self.stdout.write("\n1Ô∏è‚É£ Configuration MongoDB:")
        
        try:
            db_config = settings.DATABASES.get('default', {})
            engine = db_config.get('ENGINE', '')
            
            if 'djongo' in engine:
                self.stdout.write(f"   ‚úÖ Engine: {engine}")
                
                client_config = db_config.get('CLIENT', {})
                if verbose:
                    self.stdout.write(f"   üìä Configuration CLIENT:")
                    for key, value in client_config.items():
                        if 'password' not in key.lower():
                            self.stdout.write(f"      {key}: {value}")
                        else:
                            self.stdout.write(f"      {key}: ***")
                            
                # V√©rifier les param√®tres critiques
                host = client_config.get('host', '')
                if not host:
                    self.stdout.write("   ‚ö†Ô∏è HOST manquant dans la configuration CLIENT")
                else:
                    self.stdout.write(f"   ‚úÖ Host: {host}")
                    
            else:
                self.stdout.write(f"   ‚ùå Engine n'est pas Djongo: {engine}")
                
        except Exception as e:
            self.stdout.write(f"   ‚ùå Erreur configuration: {e}")
            if verbose:
                self.stdout.write(f"      {traceback.format_exc()}")

    def test_mongodb_connection(self, verbose):
        """Tester la connexion MongoDB directe avec PyMongo"""
        self.stdout.write("\n2Ô∏è‚É£ Test connexion MongoDB directe:")
        
        try:
            from pymongo import MongoClient
            from pymongo.errors import ServerSelectionTimeoutError
            
            # R√©cup√©rer la configuration depuis les settings
            db_config = settings.DATABASES.get('default', {})
            client_config = db_config.get('CLIENT', {})
            
            # Construire l'URI de connexion
            host = client_config.get('host', 'mongodb://localhost:27017/')
            if not host.startswith('mongodb://'):
                host = f"mongodb://{host}:27017/"
                
            self.stdout.write(f"   üì° Connexion √†: {host}")
            
            # Test de connexion avec timeout court
            client = MongoClient(host, serverSelectionTimeoutMS=5000)
            
            # Tester la connexion
            client.admin.command('ping')
            self.stdout.write("   ‚úÖ Connexion MongoDB r√©ussie")
            
            # Lister les bases de donn√©es
            db_name = db_config.get('NAME', 'vitarenta_db')
            db = client[db_name]
            collections = db.list_collection_names()
            
            self.stdout.write(f"   üìÇ Base de donn√©es: {db_name}")
            self.stdout.write(f"   üìö Collections: {len(collections)}")
            
            if verbose and collections:
                for collection in collections[:10]:  # Limiter √† 10
                    count = db[collection].count_documents({})
                    self.stdout.write(f"      {collection}: {count} documents")
            
            client.close()
            
        except ServerSelectionTimeoutError:
            self.stdout.write("   ‚ùå MongoDB n'est pas accessible")
            self.stdout.write("      V√©rifiez que MongoDB est d√©marr√© sur localhost:27017")
        except Exception as e:
            self.stdout.write(f"   ‚ùå Erreur connexion MongoDB: {e}")
            if verbose:
                self.stdout.write(f"      {traceback.format_exc()}")

    def test_djongo_connection(self, verbose):
        """Tester la connexion via Djongo"""
        self.stdout.write("\n3Ô∏è‚É£ Test connexion Djongo:")
        
        try:
            from django.db import connection
            
            # Tenter une requ√™te simple compatible avec Djongo
            # "SELECT 1" ne fonctionne pas avec Djongo, essayer autre chose
            try:
                # Test avec une vraie table
                with connection.cursor() as cursor:
                    cursor.execute("SELECT COUNT(*) FROM auth_permission")
                    result = cursor.fetchone()
                    
                self.stdout.write("   ‚úÖ Connexion Djongo fonctionnelle")
                
            except Exception as inner_e:
                # Fallback: juste tester l'ouverture de connexion
                try:
                    # Forcer l'ouverture de la connexion
                    connection.ensure_connection()
                    self.stdout.write("   ‚úÖ Connexion Djongo √©tablie (test simplifi√©)")
                except Exception as fallback_e:
                    raise inner_e
                
        except Exception as e:
            self.stdout.write(f"   ‚ùå Erreur connexion Djongo: {e}")
            
            # V√©rifier si c'est le probl√®me de fermeture de connexion
            if "Cannot use MongoClient after close" in str(e):
                self.stdout.write("   üîç Probl√®me d√©tect√©: Connexion MongoDB ferm√©e pr√©matur√©ment")
                self.stdout.write("      Solution: Patch Djongo ou configuration de pool de connexions")
            elif "Unsupported" in str(e):
                self.stdout.write("   üîç Probl√®me d√©tect√©: Requ√™te SQL non support√©e par Djongo")
                self.stdout.write("      Info: Djongo a des limitations sur certaines requ√™tes SQL")
            
            if verbose:
                self.stdout.write(f"      {traceback.format_exc()}")

    def check_models(self, verbose):
        """V√©rifier les mod√®les Django"""
        self.stdout.write("\n4Ô∏è‚É£ V√©rification des mod√®les:")
        
        try:
            from django.apps import apps
            
            # Lister tous les mod√®les
            all_models = apps.get_models()
            self.stdout.write(f"   üìä Nombre de mod√®les: {len(all_models)}")
            
            # V√©rifier les mod√®les avec des probl√®mes potentiels
            problematic_models = []
            
            for model in all_models:
                try:
                    # Test simple pour voir si le mod√®le peut √™tre utilis√©
                    model._meta.get_fields()
                except Exception as e:
                    problematic_models.append((model.__name__, str(e)))
            
            if problematic_models:
                self.stdout.write(f"   ‚ö†Ô∏è Mod√®les avec probl√®mes: {len(problematic_models)}")
                if verbose:
                    for model_name, error in problematic_models:
                        self.stdout.write(f"      {model_name}: {error}")
            else:
                self.stdout.write("   ‚úÖ Tous les mod√®les sont valides")
                
        except Exception as e:
            self.stdout.write(f"   ‚ùå Erreur v√©rification mod√®les: {e}")

    def diagnose_connection_issues(self, verbose):
        """Diagnostiquer les probl√®mes sp√©cifiques de connexion"""
        self.stdout.write("\n5Ô∏è‚É£ Diagnostic des probl√®mes de connexion:")
        
        issues_found = []
        
        # V√©rifier la version de pymongo
        try:
            import pymongo
            pymongo_version = pymongo.version
            self.stdout.write(f"   üì¶ PyMongo version: {pymongo_version}")
            
            # V√©rifier la compatibilit√©
            if pymongo_version.startswith('4.'):
                issues_found.append("PyMongo 4.x peut causer des probl√®mes avec Djongo 1.3.6")
                
        except ImportError:
            issues_found.append("PyMongo n'est pas install√©")
        
        # V√©rifier la version de djongo
        try:
            import djongo
            if hasattr(djongo, '__version__'):
                djongo_version = djongo.__version__
                self.stdout.write(f"   üì¶ Djongo version: {djongo_version}")
            else:
                self.stdout.write("   üì¶ Djongo version: inconnue")
        except ImportError:
            issues_found.append("Djongo n'est pas install√©")
        
        # V√©rifier les param√®tres de connexion
        db_config = settings.DATABASES.get('default', {})
        client_config = db_config.get('CLIENT', {})
        
        if not client_config.get('host'):
            issues_found.append("Param√®tre 'host' manquant dans CLIENT")
            
        # V√©rifier les middlewares potentiellement probl√©matiques
        middleware = getattr(settings, 'MIDDLEWARE', [])
        problematic_middleware = [
            'django.middleware.transaction.TransactionMiddleware',
        ]
        
        for mw in problematic_middleware:
            if mw in middleware:
                issues_found.append(f"Middleware potentiellement probl√©matique: {mw}")
        
        if issues_found:
            self.stdout.write("   ‚ö†Ô∏è Probl√®mes d√©tect√©s:")
            for issue in issues_found:
                self.stdout.write(f"      - {issue}")
        else:
            self.stdout.write("   ‚úÖ Aucun probl√®me √©vident d√©tect√©")

    def apply_fixes(self):
        """Appliquer des corrections automatiques"""
        self.stdout.write("\nüîß Application des corrections:")
        
        fixes_applied = []
        
        # Fix 1: V√©rifier et corriger la configuration MongoDB
        try:
            self.fix_mongodb_config()
            fixes_applied.append("Configuration MongoDB optimis√©e")
        except Exception as e:
            self.stdout.write(f"   ‚ùå Erreur fix config: {e}")
        
        # Fix 2: Cr√©er un middleware de gestion des connexions
        try:
            self.create_connection_middleware()
            fixes_applied.append("Middleware de connexion cr√©√©")
        except Exception as e:
            self.stdout.write(f"   ‚ùå Erreur cr√©ation middleware: {e}")
        
        # Fix 3: Patch Djongo si n√©cessaire
        try:
            self.patch_djongo_if_needed()
            fixes_applied.append("Patch Djongo v√©rifi√©")
        except Exception as e:
            self.stdout.write(f"   ‚ùå Erreur patch Djongo: {e}")
        
        if fixes_applied:
            self.stdout.write("   ‚úÖ Corrections appliqu√©es:")
            for fix in fixes_applied:
                self.stdout.write(f"      - {fix}")
        else:
            self.stdout.write("   ‚ö†Ô∏è Aucune correction appliqu√©e")

    def fix_mongodb_config(self):
        """Optimiser la configuration MongoDB"""
        # Cette fonction pourrait modifier settings.py si n√©cessaire
        # Pour l'instant, elle donne juste des recommandations
        
        self.stdout.write("   üìù Recommandations de configuration:")
        self.stdout.write("      - Utiliser un pool de connexions")
        self.stdout.write("      - Configurer maxPoolSize et minPoolSize")
        self.stdout.write("      - Activer retryWrites=true")

    def create_connection_middleware(self):
        """Cr√©er un middleware pour g√©rer les connexions MongoDB"""
        middleware_path = os.path.join(
            settings.BASE_DIR, 
            'core', 
            'djongo_middleware.py'
        )
        
        middleware_content = '''"""
Middleware pour g√©rer les probl√®mes de connexion MongoDB avec Djongo
"""
from django.db import connection
import logging

logger = logging.getLogger(__name__)

class DjongoConnectionMiddleware:
    """Middleware pour g√©rer les connexions MongoDB avec Djongo"""
    
    def __init__(self, get_response):
        self.get_response = get_response

    def __call__(self, request):
        # V√©rifier la connexion avant la requ√™te
        try:
            # Test de connexion simple
            if hasattr(connection, 'ensure_connection'):
                connection.ensure_connection()
        except Exception as e:
            logger.warning(f"Probl√®me de connexion d√©tect√©: {e}")
            # Tenter de fermer et rouvrir la connexion
            try:
                connection.close()
            except:
                pass

        response = self.get_response(request)
        
        # Optionnel: fermer la connexion apr√®s la requ√™te pour √©viter les fuites
        # Attention: cela peut impacter les performances
        # connection.close()
        
        return response

    def process_exception(self, request, exception):
        """G√©rer les exceptions li√©es √† la base de donn√©es"""
        if "Cannot use MongoClient after close" in str(exception):
            logger.error("Connexion MongoDB ferm√©e d√©tect√©e, tentative de reconnexion...")
            try:
                connection.close()
                # La prochaine requ√™te cr√©era une nouvelle connexion
            except:
                pass
        return None
'''
        
        with open(middleware_path, 'w', encoding='utf-8') as f:
            f.write(middleware_content)
        
        self.stdout.write(f"   ‚úÖ Middleware cr√©√©: {middleware_path}")

    def patch_djongo_if_needed(self):
        """Appliquer le patch Djongo si n√©cessaire"""
        try:
            # Importer et ex√©cuter le script de patch existant
            import subprocess
            import sys
            
            patch_script = os.path.join(settings.BASE_DIR, 'patch_djongo.py')
            if os.path.exists(patch_script):
                result = subprocess.run([sys.executable, patch_script], 
                                      capture_output=True, text=True)
                if result.returncode == 0:
                    self.stdout.write("   ‚úÖ Script de patch ex√©cut√© avec succ√®s")
                else:
                    self.stdout.write(f"   ‚ö†Ô∏è Script de patch retourn√©: {result.returncode}")
            else:
                self.stdout.write("   ‚ÑπÔ∏è Script de patch non trouv√© (patch_djongo.py)")
                
        except Exception as e:
            self.stdout.write(f"   ‚ö†Ô∏è Impossible d'ex√©cuter le patch: {e}")
